---

# User and group for NeoFS to run and own files
neofs_ir__user: "neofs-ir{{ neofs_ir__instance }}"
neofs_ir__group: "neofs-ir{{ neofs_ir__instance }}"

# Instance name to have multiple NeoFS nodes on the same host
neofs_ir__instance: ''

# Directory for configuration files and keys
neofs_ir__conf_dir: "/etc/neofs/ir{{ neofs_ir__instance }}"

# Directory for databases and processing results
neofs_ir__data_dir: "/var/lib/neofs/neofs-ir{{ neofs_ir__instance }}"

neofs_ir__key_path: "{{ neofs_ir__conf_dir }}/node.key"

# Default bind address
neofs_ir__bind_address: '0.0.0.0'

neofs_ir__morph_rpc: 'http://127.0.0.1:40332'
neofs_ir__morph_notification: 'ws://127.0.0.1:40332/ws'

neofs_ir__mainnet_rpc: 'http://127.0.0.1:20332'
neofs_ir__mainnet_notification: 'ws://127.0.0.1:20332/ws'

neofs_ir__without_mainnet: False

neofs_ir__locodedb_version: 'v0.1.0'
neofs_ir__locodedb_download_url:
  "https://github.com/nspcc-dev/neofs-locode-db/releases/download/{{ neofs_ir__locodedb_version }}/locode.db.tar.gz"

neofs_ir__locodedb_path: "{{ neofs_ir__data_dir }}/locode.db"

neofs_ir__contracts:
  netmap: '600270a6fd666dc137fa3e62c9d2606b75aeb298'
  balance: '2835a2d2a28ffc8866840df7aafda5780c7514a3'
  container: '08ebc0b968cdce2851f1a1d2fe9340e77b1f0f6c'
  neofs: '37a32e1bf20ed5141bc5748892a82f14e75a8e22'
  audit: '27571287757e0e9809d01799c9f049a8ae5952ce'
  proxy: 'dedf58b489e5af01a1a2089393102d46d74806ac'

neofs_ir__alphabet:
  az: 'dc4c2e03f2ca806a82415407cd2264338cc751b4'
  buky: '1e01771dfb5cb499f194f54d53bc4d0a37fca393'
  vedi: 'c4c68a82ec161658ccf41ac849bc587ebabc4147'
  glagoli: '7c718d032ad348820497c619f6d2f00011b22cf5'
  dobro: '88b3a5b5de99aae9308408301e9b64620fe9f999'
  yest: '2f78667749d5da59ea622f5f809022a786f8f700'
  zhivete: '06f739fa714d23d1ce8a569595812cf8f9023b1e'

# Ports and options for each service
neofs_ir__prometheus_enabled: False
neofs_ir__prometheus_port: '6662'
neofs_ir__prometheus_address:  '{{ neofs_ir__bind_address }}'
neofs_ir__prometheus_allow: []
neofs_ir__prometheus_group_allow: []
neofs_ir__prometheus_host_allow: []

neofs_ir__pprof_enabled: False
neofs_ir__pprof_port: '6661'
neofs_ir__pprof_address:  '{{ neofs_ir__bind_address }}'
neofs_ir__pprof_allow: []
neofs_ir__pprof_group_allow: []
neofs_ir__pprof_host_allow: []

# NeoFS options
neofs_ir__version: '0.18.0'
neofs_ir__docker_image: "nspccdev/neofs-ir:{{ neofs_ir__version }}"
neofs_ir__bin_url: "https://github.com/nspcc-dev/neofs-node/releases/download/v{{ neofs_ir__version }}/neofs-ir-linux-amd64"
neofs_ir__bin_path: '/usr/local/bin/neofs-ir'

# Systemd unit may use docker compose to run NeoFS IR in container, instead of
# local binary.
neofs_ir__use_compose: False

# Force debops.ferm run via role import
# May be useful when you need to have multiple instances with different
# firewall rules for each one.
neofs_ir__debops_ferm_import: False

# firewall configuration to be applied with debops.ferm role
neofs_ir__ferm__dependent_rules:
  - type: 'accept'
    name: "neofs-ir{{ neofs_ir__instance }}_prometheus"
    dport: [ '{{ neofs_ir__prometheus_port }}' ]
    daddr: [ '{{ neofs_ir__prometheus_address }}' ]
    saddr: '{{ neofs_ir__prometheus_allow + neofs_ir__prometheus_group_allow + neofs_ir__prometheus_host_allow }}'
    protocol: 'tcp'
    role: 'neofs-ir'
    rule_state: "{{ 'present' if neofs_ir__prometheus_enabled else 'absent' }}"

  - type: 'accept'
    name: "neofs-ir{{ neofs_ir__instance }}_pprof"
    dport: [ '{{ neofs_ir__pprof_port }}' ]
    daddr: [ '{{ neofs_ir__pprof_address }}' ]
    saddr: '{{ neofs_ir__pprof_allow + neofs_ir__pprof_group_allow + neofs_ir__pprof_host_allow }}'
    protocol: 'tcp'
    role: 'neofs-ir'
    rule_state: "{{ 'present' if neofs_ir__pprof_enabled else 'absent' }}"
